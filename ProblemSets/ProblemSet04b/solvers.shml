<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>dawes</owner>
  <description>A manufactured solution convergence test for poisson</description>
  <simulations>
    <simulation name="solvers">
      <input_file>
        <string_value lines="1" type="filename">poisson_mms.tfml</string_value>
      </input_file>
      <parameter_sweep>
        <parameter name="solver">
          <values>lu-richardson-umfpack lu-richardson-mumps sor-richardson-none none-cg-none none-gmres-none ilu-cg-none ilu-gmres-none gamg-cg-none gamg-richardson-none</values>
        </parameter>
        <parameter name="ncells">
          <values>8 16 32 64</values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
n = int(ncells)

arr = solver.split("-")
preconditioner = arr[0]
iterative_method = arr[1]
factorization = arr[2]

libspud.set_option("/geometry/mesh::Mesh/source::UnitSquare/number_cells", [n, n])
libspud.set_option_attribute("/system::Poisson/nonlinear_solver::SNES/type::SNES/linear_solver/iterative_method/name", iterative_method)
libspud.set_option_attribute("/system::Poisson/nonlinear_solver::SNES/type::SNES/linear_solver/preconditioner/name", preconditioner)
libspud.set_option_attribute("/system::Poisson/nonlinear_solver::SNES/type::SNES/linear_solver/preconditioner::lu/factorization_package/name", factorization)</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="error_l2">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("poisson.stat")
error_l2 = sqrt(stat["Poisson"]["u"]["L2NormErrorSquared"][-1])</string_value>
        </variable>
        <variable name="residual_l2">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
conv = parser("poisson_Poisson_SNES_ksp.conv")
residual_l2 = conv["Poisson"]["u"]["res_norm(l2)"]</string_value>
        </variable>
        <variable name="ksp_its">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
conv = parser("poisson_Poisson_SNES_ksp.conv")
ksp_its = int(conv["KSPIteration"]["value"][-1])</string_value>
        </variable>
        <variable name="ksp_time">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
conv = parser("poisson_Poisson_SNES_ksp.conv")
ksp_time = conv["ElapsedWallTime"]["value"][-1] - conv["ElapsedWallTime"]["value"][0]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="printerrors">
      <string_value lines="20" type="code" language="python">import numpy as np
import pylab as pl

print "parameters=", residual_l2.parameters.keys()
print "solvers=",residual_l2.parameters["solver"]
print "ncells=",residual_l2.parameters["ncells"]
print "error_l2=", error_l2
#print "residual_l2=", residual_l2
print "ksp_its=", ksp_its
print "ksp_time=", ksp_time</string_value>
    </test>
    <test name="plot_convergence">
      <string_value lines="20" type="code" language="python">import numpy as np
import pylab as pl


solvers=residual_l2.parameters["solver"]
ncells=residual_l2.parameters["ncells"]


#error_l2_a = np.array(error_l2[{'degree':['1']}])

for nc in ncells:
  print nc
  pl.figure()
  for s in solvers:
    print s
    slice = {"solver":s,"ncells":nc}
    pl.semilogy(residual_l2[slice],label=s)
    pl.hold(True)
      
  pl.ylabel('||r||_2')
  pl.xlabel('iteration')
  pl.grid()
  pl.legend(loc='best')
  pl.title('Convergence: ncells={0}'.format(nc))
  pl.savefig('Convergence_Ncells_{0}.pdf'.format(nc))</string_value>
    </test>
    <test name="tabulate_results">
      <string_value lines="20" type="code" language="python">import numpy as np
from pylatex import Document, Section, Table

solvers=residual_l2.parameters["solver"]
ncells=residual_l2.parameters["ncells"]

doc = Document('Solver_results')
section = Section('Solver Results')
table = Table('crrlll')
table.add_hline()
table.add_row(('Solver','nCells','nIts','$||r||_2$','$||e||_2$','KSP time/DoF (s)'))
table.add_hline()


for s in solvers:
  print s
  for nc in ncells:
    print nc
    # set the dictionary for slicing the data
    slice = {"solver":s,"ncells":nc}
    # cast floats to strings
    residual = '{0:5.3e}'.format(residual_l2[slice][-1])
    error = '{0:8.6e}'.format(error_l2[slice])
    time = '{0:5.3e}'.format(float(ksp_time[slice])/float(nc)**2)
    table.add_row((s,nc,ksp_its[slice],residual,error,time))

table.add_hline()
section.append(table)
doc.append(section)
doc.generate_tex()</string_value>
    </test>
  </tests>
</harness_options>
